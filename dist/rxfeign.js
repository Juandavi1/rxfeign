"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const rx_http_request_1=require("@akanass/rx-http-request"),operators_1=require("rxjs/operators");require("reflect-metadata");const pathParamMetadataKey=Symbol("__pathParam__"),queryMetadataKey=Symbol("__queryParam__"),classMetadataKey=Symbol("__class__"),bodyMetadataKey=Symbol("__body__"),pathParamPropertyMetadataKey=Symbol("__pathParamProperty__"),mapperMetadataKey=Symbol("__mapper__"),headersMetadataKey=Symbol("__headers__"),beforeMetadataKey=Symbol("__headers__"),exceptionHandlerMetadataKey=Symbol("__handlerError__");class Http{static addInterceptor(e){this.interceptors.unshift(new e)}static client(e){return t=>Reflect.defineMetadata(classMetadataKey,e,t)}static get(e,t,a=400){return this.request("get",e,t,a)}static post(e,t,a=400){return this.request("post",e,t,a)}static put(e,t,a=400){return this.request("put",e,t,a)}static patch(e,t,a=400){return this.request("patch",e,t,a)}static delete(e,t,a=400){return this.request("delete",e,t,a)}static request(e,t,a,r){return(s,n,d)=>{d.value=((...d)=>{const c=Reflect.getMetadata(classMetadataKey,a),o=Reflect.getMetadata(pathParamMetadataKey,s,n)||[],i=Reflect.getMetadata(queryMetadataKey,s,n)||[],p=Reflect.getMetadata(bodyMetadataKey,s,n)||[],l=Reflect.getMetadata(mapperMetadataKey,s,n)||null,u=Reflect.getMetadata(headersMetadataKey,s,n)||null,y=Reflect.getMetadata(beforeMetadataKey,s,n)||null,h=Reflect.getMetadata(exceptionHandlerMetadataKey,s,n)||null,f=new Headers;let m=String();const M=d;let g=String(t);g=UtilsHttp.buildPathParams(o,M,g);const _=UtilsHttp.buildQueryParams(i,M);"object"==typeof c?(m=c.url,UtilsHttp.prepareHeaders(c.headers,f)):m=c,m=m.concat(g).concat("?"===_?"":_);const b="get"!==e?UtilsHttp.prepareBody(p,M):String();u&&Object.keys(u).forEach(e=>f.set(e,u[e]));let K={url:m,body:b,headers:f.getHeaders(),method:e};return K=y?y(K):K,this.interceptors.forEach(e=>K=e.intercep(K)),rx_http_request_1.RxHR[e](K.url,{headers:K.headers,body:K.body,qsStringifyOptions:{arrayFormat:"repeat"}}).pipe(operators_1.map(e=>this.mapBodyAndControlError(e,h,r)),operators_1.map(e=>l?l(e):e))})}}static mapBodyAndControlError(e,t,a){const{body:r,statusCode:s,request:n}=e.response;if(s<a)return r?JSON.parse(r):r;throw t?t(r,s,n):r&&r.message&&r.error?new HttpRequestException(r.error,s,r.message):new HttpRequestException(JSON.stringify(r),s,String())}static pathParam(e){return(t,a,r)=>{const s=Reflect.getOwnMetadata(pathParamMetadataKey,t,a)||[];s.unshift({indexArgument:r,paramValue:e}),Reflect.defineMetadata(pathParamMetadataKey,s,t,a)}}static query(e){return(t,a,r)=>{const s=Reflect.getOwnMetadata(queryMetadataKey,t,a)||[];s.unshift({indexArgument:r,paramValue:e}),Reflect.defineMetadata(queryMetadataKey,s,t,a)}}static body(e,t,a){const r=Reflect.getOwnMetadata(bodyMetadataKey,e,t)||[];r.unshift(a),Reflect.defineMetadata(bodyMetadataKey,r,e,t)}static pathParamProperty(e=!0){return(e,t)=>Reflect.defineMetadata(pathParamPropertyMetadataKey,{name:t},e,t)}static mapper(e){return(t,a)=>Reflect.defineMetadata(mapperMetadataKey,e,t,a)}static headers(e){return(t,a)=>Reflect.defineMetadata(headersMetadataKey,e,t,a)}static before(e){return(t,a)=>Reflect.defineMetadata(beforeMetadataKey,e,t,a)}static handlerError(e){return(t,a)=>Reflect.defineMetadata(exceptionHandlerMetadataKey,e,t,a)}}Http.interceptors=[],exports.Http=Http;class UtilsHttp{static prepareHeaders(e={},t){Object.keys(e).forEach(a=>t.has(e[a])?null:t.set(a,e[a])),t.has("Content-Type")||t.set("Content-Type","application/json")}static buildQueryParams(e,t){let a="?";const r=String();return(e=e.filter(e=>t[e.indexArgument])).forEach((s,n)=>{if("object"==typeof t[s.indexArgument]){const e=Object.keys(t[s.indexArgument])||[];let n=0;for(const d in t[s.indexArgument])a=a.concat(`${d}=${t[s.indexArgument][d]}${n===e.length-1?r:"&"}`),n++}else{if(!s.paramValue)return;a=(a=a.length>1?a.concat("&"):a).concat(`${s.paramValue}=${t[s.indexArgument]}${n===e.length-1?r:"&"}`)}}),a}static buildPathParams(e,t,a){return a=a.replace(/\s/g,"").trim(),e.filter(e=>e.paramValue).forEach(e=>{if(!e.paramValue)return;const r="{".concat(e.paramValue.toString()).concat("}");a.includes(r)&&(a=a.replace(r,t[e.indexArgument]))}),e.filter(e=>!e.paramValue).map(e=>a+=`/${t[e.indexArgument]}`),t.filter(e=>"object"==typeof e).forEach(e=>{Object.keys(e).forEach(t=>{const r=Reflect.getMetadata(pathParamPropertyMetadataKey,e,t);r&&(a=a.replace(`{${r.name}}`,e[r.name]))})}),a}static prepareBody(e,t){let a={};return e.forEach(e=>a=Object.assign({},a,t[e])),e.length?JSON.stringify(a):String()}}class HttpRequestException{constructor(e,t,a){this.error=e,this.statusCode=t,this.message=a}}exports.HttpRequestException=HttpRequestException;class Headers{constructor(){this.headers=new Map}has(e){return this.headers.has(e)}set(e,t){return this.headers.set(e,t),this}getHeaders(){const e=Object();return Array.from(this.headers.keys()).forEach(t=>e[t]=this.headers.get(t)),e}}